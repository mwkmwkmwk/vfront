var searchIndex = JSON.parse('{\
"vfront_basics":{"doc":"This crate contains various pieces of infrastructure that …","t":[0,14,0,3,4,3,4,8,3,4,3,3,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,3,4,3,4,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["diag","diag_types","source","DiagBuilder","DiagKind","DiagRegistry","DiagSeverity","DiagSink","DiagSpan","DiagSpanKind","DiagStore","DiagSystem","DiagType","Diagnostic","Error","Error","Fatal","Fatal","Ignore","Note","Note","NoteIgnored","Primary","Secondary","Warning","Warning","WarningIgnored","begin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","component","default","default","description","emit","emit","emit","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_diagnostic","get_severity","got_error","got_fatal","help","help","help_if","into","into","into","into","into","into","into","into","into","into","into_vec","iter_component_diagnostics","iter_components","iter_diagnostics","kind","kind","msg","msg","name","new","new","new","partial_cmp","primaries","primary","range","register_component","registry","secondaries","secondary","severity","spans","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","File","IncludeEnter","IncludeExit","MacroExpansion","Plain","SourceChunk","SourceChunkInfo","SourceLineInfo","SourceLineOverrideKind","SourceLoc","SourceManager","SourceOverrideLineInfo","SourceRange","SourceRangeRef","SourceReader","SourceRef","SourceSimpleLineInfo","add","add_assign","add_file","add_included_file","add_line_override","add_line_override","add_macro_expansion","advance","bookmark","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","chunk","chunk","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","column_num","compress","compress","cursor","default","depth","deref","eat","eat_if","eat_if_map","eat_while","end","end","end","end","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expand_loc","expand_range","file_name","file_name","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_line_info","get_line_info","get_line_info","get_simple_line_info","hash","hash","hash","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","len","line","line_num","line_num","line_num","line_offset","loc","move_to","ne","ne","ne","ne","ne","new","overrides","peek","pos","pos_end","pos_start","range","range","range","range_from","range_len","range_to","range_to","reader","reader","rollback","set_mark","start","start","start","str","suffix","suffix","text","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_eat","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","file_name","loc_defined","loc_included","loc_invoked","name"],"q":["vfront_basics","","","vfront_basics::diag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","vfront_basics::sourcevfront_basics::source::SourceChunkInfo","","","",""],"d":["The vfront diagnostic system.","Defines a list of diagnostic types.  To be used once in …","A bunch of data structures that keep the source code in …","A builder for <code>Diagnostic</code>s.  Created by <code>DiagSystem::begin</code>.  …","The general kind of a <code>DiagType</code>.  Determines its default …","A registry of all <code>DiagType</code>s in the program.  Should be …","Determines the handling of a given diagnostic.  Normally …","A consumer of <code>Diagnostic</code>s.","A code span attached to a <code>Diagnostic</code>.","The kind of a <code>DiagSpan</code>.","A <code>DiagSink</code> implementation that simply stores all emitted …","The main structure handling all diagnostics within the …","Describes a diagnostic type.  Defined using <code>diag_types</code>.","An emitted diagnostic.","The input was invalid in some way, and processing should …","An error.","Processing should be aborted immediately.  This should be …","A fatal error.","The diagnostic should be entirely discarded.","An informational message (not considered to be a problem). …","An informational message, shown by default.","An informational message, not shown by default.","The likely location of the problem, or the main referenced …","Some code to be highlighted that relates to this …","Shows a message about a possible problem, but does not …","A warning, shown by default.","A warning, not shown by default.","Starts emitting a diagnostic.  Takes a <code>DiagType</code> and the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The identifier of the component that defines this type.","","","The help message for this diagnostic, to be printed when …","Called by <code>DiagSystem</code> for every non-ignored diagnostic …","","Emits the diagnostic.  Returns true iff this was a fatal …","","","","","","","","","","","","","","","","","","","","","","","","","Returns a DiagType with the given component and name, if …","Determines the severity to be used for a given diagnostic …","Returns true iff a diagnostic of error or fatal severity …","Returns true iff a diagnostic of fatal severity has been …","Sets the help message for the diagnostic.","The help message, if any.  If present, this suggests a way …","Sets the help message for the diagnostic, but only if the …","","","","","","","","","","","Consumes the sink and converts it into a vector of …","Returns an iterator of all DiagTypes registered for a …","Iterates through all registered components (in …","Returns an iterator of all DiagTypes in all components.","The diagnostic kind..","Whether this is a primary or secondary span.","The main message of this diagnostic.","The message associated with this code.","The identifier of this type, must be unique per component. …","Creates a new empty diagnostic store.","Creates a new, empty registry.","Creates the diagnostic system.  A <code>DiagRegistry</code> and an …","","Adds multiple primary code spans to the diagnostic.","Adds a primary code span to the diagnostic.","The associated code range.","Registers a component together with its diagnostic type …","Returns the underlying registry.","Adds multiple secondary code spans to the diagnostic.","Adds a secondary code span to the diagnostic.","The final severity of this diagnostic.","The attached code spans.","","","","","","","","","","","","","","","","","","","","","","","","","","The type of this diagnostic.","","","","","","","","","","","A source chunk that was loaded from a file.","Entering an include file.","Exiting an include file.","A source chunk resulting from macro expansion.","No include file level change.","A contiguous chunk of source code, belonging to a …","Information about how a <code>SourceChunk</code> was created.","Result of looking up a line number.","Describes the kind of a line override entry (the third …","A compressed representation of a location in the source …","A catalogue of all source files that were involved in the …","Information about overriden line number and file name, …","A half-open range of two <code>SourceLoc</code>s that may or may not …","An uncompressed representation of a range of locations in …","A helper for reading from a source chunk character by …","An uncompressed representation of a location in the source …","Simple decoded location, to be used when exporting to …","","","Add a new chunk representing a top-level file, return it.","Add a new chunk representing an included file, return it.","Add a new line override.  The pos given must be strictly …","Add a new line override.  Calls the underlying <code>SourceChunk</code> …","Add a new chunk representing a macro expansion, return it.","Moves the cursor position forwards by the given number of …","Returns the current bookmark position.","","","","","","","","","","","","","","","","","","","","","","","","","The containing chunk.","The containing chunk.","The chunk containing the location.","","","","","","","","","","","","","","","","","","","","","The column number, 1-based.  This is a simple byte count.","Converts into a <code>SourceLoc</code>.","Converts into a <code>SourceRange</code>.","Returns the current cursor position.","","Depth in include / macro expansion stack.  Top-level files …","","Returns the character at the cursor and consumes it, or …","Checks if the character at the cursor satisfies the given …","Takes the character at the cursor, runs a given function …","Consumes the characters at the cursor, stopping at the end …","Returns a reference to the end of the chunk.","Return a <code>SourceRef</code> corresponding to end of this range.","Returns the end position of this reader.","End location, excluded.","","","","","","","","","","","","","","","Expand a <code>SourceLoc</code> into a <code>SourceRef</code>.","Expand a <code>SourceRange</code> into a <code>SourceRangeRef</code>.","The file name containing the location.","The overriden file name.","","","","","","","","","","","","","","","","","","","","","","","","","Decodes the raw position into line number and related …","Decodes a <code>SourceLoc</code> directly to <code>SourceLineInfo</code>.","Decodes the raw position into line number and related …","Decodes a <code>SourceLoc</code> into <code>SourceSimpleLineInfo</code>.","","","","","","","","Information on where it came from.","","","","","","","","","","","","","Returns true iff the cursor position is at the end …","Returns the length of the underlying source text in bytes.","The line text.","The line number, 1-based.","Raw line number, 1-based.","The overriden line number.","Offset, in bytes, within the line text.","Returns a reference to the given position (in bytes).","Moves the cursor to the given position.","","","","","","Creates a new <code>SourceManager</code>.","Overriden line number information from `line directives.  …","Returns the character at the cursor, or None if the cursor …","The position, in bytes, within the chunk.","The end position, in bytes, within the chunk (excluded).","The start position, in bytes, within the chunk (included).","Returns a reference to a subrange of the chunk.","Returns a subrange of this range.","Returns a <code>SourceRangeRef</code> starting from the current …","Returns a <code>SourceRangeRef</code> spanning from the given position …","Returns a range of given length starting from this …","Returns a <code>SourceRange</code> starting at this location and ending …","Returns a range starting at this location and ending at …","Returns a <code>SourceReader</code> covering the range from this …","Returns a <code>SourceReader</code> covering this range.","Moves the cursor position back to the current bookmark …","Moves the bookmark position to the current cursor position.","Returns a reference to the start of the chunk.","Return a <code>SourceRef</code> corresponding to start of this range.","Start location, included.","Returns the underlying string slice.","Returns the suffix of the referenced chunk’s text …","Returns the chunk slice between the cursor and the end.","The meat of this chunk.","","","","","","","","","","","If there is an occurence of the given string directly at …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The source file name.","Location of the `define that created this macro, or None if","Location of the `include that pulled this file into the …","Location of the macro invocation that created this …","The name of the macro involved."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,1,2,2,3,3,1,2,2,4,5,6,4,7,1,2,8,9,10,3,5,6,4,7,1,2,8,9,10,3,1,2,9,10,3,1,2,9,10,3,1,8,5,6,8,11,5,7,1,2,8,3,1,2,8,3,1,2,8,9,10,3,5,6,4,7,1,2,8,9,10,3,6,4,4,4,7,9,7,5,6,4,7,1,2,8,9,10,3,5,6,6,6,8,10,9,10,8,5,6,4,1,7,7,10,6,4,7,7,9,9,1,2,9,10,3,5,6,4,7,1,2,8,9,10,3,5,6,4,7,1,2,8,9,10,3,9,5,6,4,7,1,2,8,9,10,3,12,13,13,12,13,0,0,0,0,0,0,0,0,0,0,0,0,14,14,15,15,16,14,15,17,17,16,15,12,13,18,19,14,20,21,22,23,17,16,15,12,13,18,19,14,20,21,22,23,17,14,20,22,12,13,18,19,14,20,21,22,23,17,12,13,18,19,14,20,21,22,23,17,21,14,20,17,15,16,20,17,17,17,17,16,20,17,19,16,13,18,19,14,20,21,16,13,18,19,14,20,21,15,15,21,23,16,12,13,18,19,14,20,21,23,17,16,15,12,13,18,18,19,19,14,20,21,22,23,17,16,15,14,15,16,13,18,19,14,20,21,16,16,15,12,13,18,19,14,20,21,22,23,17,17,16,22,21,22,23,22,16,17,18,19,14,20,21,15,22,17,14,20,20,16,20,17,17,14,18,14,14,20,17,17,16,20,19,20,14,17,16,12,13,18,19,14,20,21,22,23,17,17,16,15,12,13,18,19,14,20,21,22,23,17,16,15,12,13,18,19,14,20,21,22,23,17,16,15,12,13,18,19,14,20,21,22,23,17,24,25,24,25,25],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["diagtype",3]],["diagbuilder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["diagseverity",4]],[[],["diagkind",4]],[[],["diagnostic",3]],[[],["diagspan",3]],[[],["diagspankind",4]],[[]],[[]],[[]],[[]],[[]],[[["diagseverity",4]],["ordering",4]],null,[[]],[[]],null,[[["diagnostic",3]]],[[["diagnostic",3]]],[[],["bool",15]],[[["diagseverity",4]],["bool",15]],[[["diagkind",4]],["bool",15]],[[["diagtype",3]],["bool",15]],[[["diagspankind",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["diagtype",3],["option",4,["diagtype"]]]],[[["diagtype",3]],["diagseverity",4]],[[],["bool",15]],[[],["bool",15]],[[]],null,[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["diagnostic"]],["diagnostic",3]]],[[["str",15]],["option",4]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[["diagsink",8],["diagregistry",3]]],[[["diagseverity",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],null,[[["str",15]]],[[],["diagregistry",3]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[],["sourcechunk",3]],[[],["sourcechunk",3]],[[["usize",15],["sourcelineoverridekind",4]]],[[["usize",15],["sourcelineoverridekind",4]]],[[["option",4,["sourcerange"]],["sourcerange",3]],["sourcechunk",3]],[[["usize",15]]],[[],["sourceref",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["sourcechunkinfo",4]],[[],["sourcelineoverridekind",4]],[[],["sourceloc",3]],[[],["sourcerange",3]],[[],["sourceref",3]],[[],["sourcerangeref",3]],[[],["sourcesimplelineinfo",3]],[[],["sourcelineinfo",3]],[[],["sourceoverridelineinfo",3]],[[],["sourcereader",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["sourceloc",3]],[[],["sourcerange",3]],[[],["sourceref",3]],[[]],null,[[],["str",15]],[[],[["option",4,["char"]],["char",15]]],[[],[["option",4,["char"]],["char",15]]],[[],["option",4]],[[],["str",15]],[[],["sourceref",3]],[[],["sourceref",3]],[[],["sourceref",3]],null,[[],["bool",15]],[[["sourcelineoverridekind",4]],["bool",15]],[[["sourceloc",3]],["bool",15]],[[["sourcerange",3]],["bool",15]],[[["sourceref",3]],["bool",15]],[[["sourcerangeref",3]],["bool",15]],[[["sourcesimplelineinfo",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["sourceloc",3]],["sourceref",3]],[[["sourcerange",3]],["sourcerangeref",3]],null,null,[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["sourceref",3]]],[[]],[[["sourcerangeref",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["sourcelineinfo",3]],[[["sourceloc",3]],["sourcelineinfo",3]],[[],["sourcelineinfo",3]],[[["sourceloc",3]],["sourcesimplelineinfo",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],null,null,null,null,null,[[["usize",15]],["sourceref",3]],[[["sourceref",3]]],[[["sourceloc",3]],["bool",15]],[[["sourcerange",3]],["bool",15]],[[["sourceref",3]],["bool",15]],[[["sourcerangeref",3]],["bool",15]],[[["sourcesimplelineinfo",3]],["bool",15]],[[]],null,[[]],null,null,null,[[],["sourcerangeref",3]],[[],["sourcerangeref",3]],[[],["sourcerangeref",3]],[[["sourceref",3]],["sourcerangeref",3]],[[["usize",15]],["sourcerangeref",3]],[[["sourceloc",3]],["sourcerange",3]],[[["sourceref",3]],["sourcerangeref",3]],[[],["sourcereader",3]],[[],["sourcereader",3]],[[]],[[]],[[],["sourceref",3]],[[],["sourceref",3]],null,[[],["str",15]],[[],["str",15]],[[],["str",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null],"p":[[4,"DiagSeverity"],[4,"DiagKind"],[4,"DiagSpanKind"],[3,"DiagSystem"],[3,"DiagStore"],[3,"DiagRegistry"],[3,"DiagBuilder"],[3,"DiagType"],[3,"Diagnostic"],[3,"DiagSpan"],[8,"DiagSink"],[4,"SourceChunkInfo"],[4,"SourceLineOverrideKind"],[3,"SourceRef"],[3,"SourceManager"],[3,"SourceChunk"],[3,"SourceReader"],[3,"SourceLoc"],[3,"SourceRange"],[3,"SourceRangeRef"],[3,"SourceSimpleLineInfo"],[3,"SourceLineInfo"],[3,"SourceOverrideLineInfo"],[13,"File"],[13,"MacroExpansion"]]},\
"vfront_tokendata_derive":{"doc":"","t":[24],"n":["TokenData"],"q":["vfront_tokendata_derive"],"d":[""],"i":[0],"f":[null],"p":[]},\
"vfront_verilog_parser":{"doc":"","tn":["lang","lex","literal","token","LangMode","SystemVerilog2005","SystemVerilog2009","SystemVerilog2012","SystemVerilog2017","SystemVerilogAMS","Verilog1995","Verilog2001","Verilog2001NoConfig","Verilog2005","VerilogA10","VerilogAMS20","VerilogAMS21","VerilogAMS22","VerilogAMS23","VerilogAMS24","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","into","is_vams","to_owned","try_from","try_into","type_id","Lexer","borrow","borrow_mut","from","into","lex","new","peek","step","try_from","try_into","type_id","make_string_literal","And","AndAnd","AndAndAnd","AndEq","At","AtAt","AtStar","Backslash","BaseBin","BaseBin","BaseDec","BaseDec","BaseHex","BaseHex","BaseOct","BaseOct","BlockComment","BlockCommentUnclosed","Colon","ColonColon","Comma","DecimalNumber","Default","DigitsBin","DigitsDec","DigitsHex","DigitsOct","DirBeginKeywords","DirCellDefine","DirCurFile","DirCurLine","DirDefaulTransition","DirDefaultDiscipline","DirDefaultNetType","DirDefaultNodeType","DirDefine","DirElsIf","DirElse","DirEndCellDefine","DirEndIf","DirEndKeywords","DirIfDef","DirIfNDef","DirInclude","DirLine","DirNoUnconnectedDrive","DirPragma","DirResetAll","DirTimeScale","DirUnconnectedDrive","DirUndef","DirUndefineAll","Directive","Div","DivEq","Dollar","Dot","DotStar","End","Eq","EqEq","EqEqEq","EqEqQuest","EqGt","EscapedId","Gt","GtEq","GtGt","GtGtEq","GtGtGt","GtGtGtEq","Hash","HashEqHash","HashHash","HashMinusHash","Include","KwAbove","KwAbs","KwAbsDelay","KwAbsDelta","KwAbstol","KwAcStim","KwAcceptOn","KwAccess","KwAcos","KwAcosh","KwAlias","KwAliasParam","KwAlways","KwAlwaysComb","KwAlwaysFf","KwAlwaysLatch","KwAnalog","KwAnalysis","KwAnd","KwAsin","KwAsinh","KwAssert","KwAssign","KwAssume","KwAtan","KwAtan2","KwAtanh","KwAutomatic","KwBefore","KwBegin","KwBind","KwBins","KwBinsOf","KwBit","KwBoundStep","KwBranch","KwBreak","KwBuf","KwBufIf0","KwBufIf1","KwByte","KwCHandle","KwCase","KwCaseX","KwCaseZ","KwCeil","KwCell","KwChecker","KwClass","KwClocking","KwCmos","KwConfig","KwConnect","KwConnectModule","KwConnectRules","KwConst","KwConstraint","KwContext","KwContinue","KwContinuous","KwCos","KwCosh","KwCover","KwCoverGroup","KwCoverPoint","KwCross","KwDdt","KwDdtNature","KwDdx","KwDeassign","KwDefParam","KwDefault","KwDelay","KwDesign","KwDisable","KwDiscipline","KwDiscontinuity","KwDiscrete","KwDist","KwDo","KwDomain","KwDriverUpdate","KwEdge","KwElse","KwEnd","KwEndCase","KwEndChecker","KwEndClass","KwEndClocking","KwEndConfig","KwEndConnectRules","KwEndDiscipline","KwEndFunction","KwEndGenerate","KwEndGroup","KwEndInterface","KwEndModule","KwEndNature","KwEndPackage","KwEndParamSet","KwEndPrimitive","KwEndProgram","KwEndProperty","KwEndSequence","KwEndSpecify","KwEndTable","KwEndTask","KwEnum","KwEvent","KwEventually","KwExclude","KwExp","KwExpect","KwExport","KwExtends","KwExtern","KwFinal","KwFinalStep","KwFirstMatch","KwFlickerNoise","KwFloor","KwFlow","KwFor","KwForEach","KwForce","KwForever","KwFork","KwForkJoin","KwFrom","KwFunction","KwGenVar","KwGenerate","KwGlobal","KwGround","KwHighZ0","KwHighZ1","KwHypot","KwIdt","KwIdtMod","KwIdtNature","KwIf","KwIfNone","KwIff","KwIgnoreBins","KwIllegalBins","KwImplements","KwImplies","KwImport","KwIncDir","KwInclude","KwInf","KwInitial","KwInitialStep","KwInout","KwInput","KwInside","KwInstance","KwInt","KwInteger","KwInterconnect","KwInterface","KwIntersect","KwJoin","KwJoinAny","KwJoinNone","KwLaplaceNd","KwLaplaceNp","KwLaplaceZd","KwLaplaceZp","KwLarge","KwLastCrossing","KwLet","KwLibList","KwLibrary","KwLimExp","KwLn","KwLocal","KwLocalParam","KwLog","KwLogic","KwLongInt","KwMacroModule","KwMatches","KwMax","KwMedium","KwMerged","KwMin","KwModPort","KwModule","KwNand","KwNature","KwNegEdge","KwNetResolution","KwNetType","KwNew","KwNextTime","KwNmos","KwNoShowCancelled","KwNoiseTable","KwNoiseTableLog","KwNor","KwNot","KwNotIf0","KwNotIf1","KwNull","KwOr","KwOutput","KwPackage","KwPacked","KwParamSet","KwParameter","KwPmos","KwPosEdge","KwPotential","KwPow","KwPrimitive","KwPriority","KwProgram","KwProperty","KwProtected","KwPull0","KwPull1","KwPullDown","KwPullUp","KwPulseStyleOnDetect","KwPulseStyleOnEvent","KwPure","KwRCmos","KwRNmos","KwRPmos","KwRTran","KwRTranIf0","KwRTranIf1","KwRand","KwRandC","KwRandCase","KwRandSequence","KwReal","KwRealTime","KwRef","KwReg","KwRejectOn","KwRelease","KwRepeat","KwResolveTo","KwRestrict","KwReturn","KwSAlways","KwSEventually","KwSNextTime","KwSUntil","KwSUntilWith","KwScalared","KwSequence","KwShortInt","KwShortReal","KwSigned","KwSin","KwSinh","KwSlew","KwSmall","KwSoft","KwSolve","KwSpecParam","KwSpecify","KwSplit","KwSqrt","KwStatic","KwString","KwStrong","KwStrong0","KwStrong1","KwStruct","KwSuper","KwSupply0","KwSupply1","KwSyncAcceptOn","KwSyncRejectOn","KwTable","KwTagged","KwTan","KwTanh","KwTask","KwThis","KwThroughout","KwTime","KwTimePrecision","KwTimeUnit","KwTimer","KwTran","KwTranIf0","KwTranIf1","KwTransition","KwTri","KwTri0","KwTri1","KwTriAnd","KwTriOr","KwTriReg","KwType","KwTypedef","KwUWire","KwUnion","KwUnique","KwUnique0","KwUnits","KwUnsigned","KwUntil","KwUntilWith","KwUntyped","KwUse","KwVar","KwVectored","KwVirtual","KwVoid","KwWAnd","KwWOr","KwWReal","KwWait","KwWaitOrder","KwWeak","KwWeak0","KwWeak1","KwWhile","KwWhiteNoise","KwWildcard","KwWire","KwWith","KwWithin","KwXnor","KwXor","KwZiNd","KwZiNp","KwZiZd","KwZiZp","LBrace","LBraceLit","LBracket","LParen","LParenAttr","LexMode","LineComment","Lt","LtEq","LtGtString","LtGtStringUnclosed","LtLt","LtLtEq","LtLtLt","LtLtLtEq","LtMinusGt","MacroEscapedQuote","MacroJoiner","MacroQuote","Minus","MinusColon","MinusEq","MinusGt","MinusGtGt","MinusMinus","Mod","ModEq","Mul","MulEq","MulGt","MulMul","Newline","Not","NotEq","NotEqEq","NotEqQuest","OneStep","Or","OrEq","OrEqGt","OrMinusGt","OrOr","ParenStar","Plus","PlusColon","PlusEq","PlusPlus","Quest","RBrace","RBracket","RParen","RParenAttr","RealNumber","Semicolon","SimpleId","SingleQuote","String","StringUnclosed","SysACos","SysACosH","SysARandom","SysASin","SysASinH","SysATan","SysATan2","SysATanH","SysAbsTime","SysAnalogNodeAlias","SysAnalogPortAlias","SysAngle","SysAssertControl","SysAssertFailOff","SysAssertFailOn","SysAssertKill","SysAssertNonVacuousOn","SysAssertOff","SysAssertOn","SysAssertPassOff","SysAssertPassOn","SysAssertVacuousOff","SysAsyncAndArray","SysAsyncAndPlane","SysAsyncNandArray","SysAsyncNandPlane","SysAsyncNorArray","SysAsyncNorPlane","SysAsyncOrArray","SysAsyncOrPlane","SysBits","SysBitsToReal","SysBitsToShortReal","SysBoundStep","SysCLog2","SysCast","SysCeil","SysChanged","SysChangedGClk","SysChangingGClk","SysCos","SysCosH","SysCountBits","SysCountOnes","SysCoverageControl","SysCoverageGet","SysCoverageGetMax","SysCoverageMerge","SysCoverageSave","SysDebug","SysDimensions","SysDiscontinuity","SysDisplay","SysDisplayB","SysDisplayH","SysDisplayO","SysDistChiSquare","SysDistErlang","SysDistExponential","SysDistNormal","SysDistPoisson","SysDistT","SysDistUniform","SysDriverCount","SysDriverDelay","SysDriverNextState","SysDriverNextStrength","SysDriverState","SysDriverStrength","SysDriverType","SysError","SysExit","SysExp","SysFClose","SysFDebug","SysFDisplay","SysFDisplayB","SysFDisplayH","SysFDisplayO","SysFEof","SysFError","SysFFlush","SysFGetC","SysFGetS","SysFMonitor","SysFMonitorB","SysFMonitorH","SysFMonitorO","SysFOpen","SysFRead","SysFScanF","SysFSeek","SysFStrobe","SysFStrobeB","SysFStrobeH","SysFStrobeO","SysFTell","SysFWrite","SysFWriteB","SysFWriteH","SysFWriteO","SysFallingGClk","SysFatal","SysFell","SysFellGClk","SysFinish","SysFloor","SysFullSkew","SysFutureGClk","SysGetCoverage","SysHFlip","SysHigh","SysHold","SysHypot","SysIToR","SysIncrement","SysInfo","SysIsUnbounded","SysIsUnknown","SysLeft","SysLimit","SysLn","SysLoadCoverageDb","SysLog10","SysLow","SysMFactor","SysMonitor","SysMonitorB","SysMonitorH","SysMonitorO","SysMonitorOff","SysMonitorOn","SysNoChange","SysOneHot","SysOneHot0","SysParamGiven","SysPast","SysPastGClk","SysPeriod","SysPortConnected","SysPow","SysPrintTimeScale","SysQAdd","SysQExam","SysQFull","SysQInitialize","SysQRemove","SysRDistChiSquare","SysRDistErlang","SysRDistExponential","SysRDistNormal","SysRDistPoisson","SysRDistT","SysRDistUniform","SysRToI","SysRandom","SysReadMemB","SysReadMemH","SysRealTime","SysRealToBits","SysRecRem","SysRecovery","SysRemoval","SysRewind","SysRight","SysRisingGClk","SysRoot","SysRose","SysRoseGClk","SysSFormat","SysSScanF","SysSTime","SysSWrite","SysSWriteB","SysSWriteH","SysSWriteO","SysSampled","SysSdfAnnotate","SysSetCoverageDbName","SysSetup","SysSetupHold","SysShortRealToBits","SysSigned","SysSimParam","SysSimParamStr","SysSimProbe","SysSin","SysSinH","SysSize","SysSkew","SysSqrt","SysStable","SysStableGClk","SysSteadyGClk","SysStop","SysStrobe","SysStrobeB","SysStrobeH","SysStrobeO","SysSyncAndArray","SysSyncAndPlane","SysSyncNandArray","SysSyncNandPlane","SysSyncNorArray","SysSyncNorPlane","SysSyncOrArray","SysSyncOrPlane","SysSystem","SysTableModel","SysTan","SysTanH","SysTemperature","SysTestPlusArgs","SysTime","SysTimeFormat","SysTimeSkew","SysTypeName","SysURandom","SysURandomRange","SysUngetC","SysUnit","SysUnpackedDimensions","SysUnsigned","SysVFlip","SysValuePlusArgs","SysVt","SysWarning","SysWidth","SysWrite","SysWriteB","SysWriteH","SysWriteMemB","SysWriteMemH","SysWriteO","SysXPosition","SysYPosition","SystemId","Table","TableItem","Tilde","TildeAnd","TildeOr","TildeXor","Time","Token","TokenKind","UnbasedUnsizedNumber","Unknown","Whitespace","Xor","XorEq","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","into","into","into","kind","ne","parse_keyword","src","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["vfront_verilog_parser","","","","vfront_verilog_parser::lang","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","vfront_verilog_parser::lex","","","","","","","","","","","","vfront_verilog_parser::literal","vfront_verilog_parser::tokend":["","","Functions for handling Verilog literals.","","Selects the recognized language.","IEEE 1800-2005.","IEEE 1800-2009.","IEEE 1800-2012.","IEEE 1800-2017.","And you thought Objective-C++ was bad?","IEEE 1364-1995.","IEEE 1364-2001.","IEEE 1364-2001, but without config-related keywords.","IEEE 1364-2005.","Verilog-A 1.0.","Verilog-AMS 2.0 (Verilog1995-based).","Verilog-AMS 2.1 (Verilog1995-based).","Verilog-AMS 2.2 (Verilog1995-based).","Verilog-AMS 2.3 (Verilog2005-based).","Verilog-AMS 2.4 (Verilog2005-based).","","","","","","","","","","","","","","","A raw lexer that will iterate through tokens from a …","","","","","","Creates a new lexer.","Returns a token according to the selected mode and steps …","","","","","Makes a string literal with the given contents.","","","","","","","","","Used after recognizing the binary base token (’b etc) in …","","Like BaseBin, but for decimal base.","","Like BaseBin, but for hexadecimal base.","","Like BaseBin, but for octal base.","","/* */","/* that is never closed","","","","Decimal digits + _","The usual rules apply.","A sequence of binary digits (only recognized for …","A sequence of decimal digits (only recognized for …","A sequence of hexadecimal digits (only recognized for …","A sequence of octal digits (only recognized for …","","","","","","","","","","","","","","","","","","","","","","","","","","` followed by sequence of letter, _, $, or digit","","","","","","End of input","","","","","","Backslash followed by non-empty sequence of printable …","","","","","","","","","","","Used after recognizing `include.  &lt; and &gt; are considered …elects how tokens are recognized.","//","","","A &lt;&gt;-quoted string (only recognized for LexMode::Include).","A &lt;&gt;-quoted string that is missing the &gt;","","","","","","","","","","","","","","","","","","","","","\\\\r, \\\\n, or \\\\r\\\\n","","","","","","","","","","","","","","","","","","","","","Decimal digits + _, plus decimal point and/or e[+-] …","","Letter or _, followed by sequence of letter, _, $, or digit","","A string literal","A string literal that is missing the closing “followed by sequence of letter, _, $, or digit","Used within the UDP table construct.  Returns single-char …","A single non-paren, non-colon character within a table …","","","","","Decimal number, possibly with decimal point, with time …","A token, as returned by the lexer or the preprocessor.","Type of a Token.","","An unrecognized character (non-printable, non-ASCII, or …","Any amount of whitespace that is not a newline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,4,3,4,3,4,3,4,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,0,0,3,3,3,3,3,4,3,5,4,3,5,4,3,5,4,3,5,4,3,5,4,3,5,4,3,5,4,3,5,4,3,5,5,5,0,5,4,3,5,4,3,5,4,3,5,4,3,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["langmode",4]],[[]],[[["langmode",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[["lexmode",4]],["token",3]],[[["sourcechunk",3]]],[[["lexmode",4]],["token",3]],[[["token",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["lexmode",4]],[[],["tokenkind",4]],[[],["token",3]],[[]],[[]],[[]],[[["lexmode",4]],["bool",15]],[[["tokenkind",4]],["bool",15]],[[["token",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["token",3]],["bool",15]],[[["str",15],["langmode",4]],[["option",4,["tokenkind"]],["tokenkind",4]]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"LangMode"],[3,"Lexer"],[4,"TokenKind"],[4,"LexMode"],[3,"Token"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};